// MIXINS ASSOCIATED WITH CSS3 ANIMATIONS AND EFFECTS
//
// @package		Лийр Library (liir)
// @author		Colton James Wiscombe <colton@hazardmediagroup.com>
// @copyright	2014 Hazard Media Group LLC
// @license		MIT License - http://www.opensource.org/licenses/mit-license.html
// @link		https://github.com/Alekhen/liir-lib
// @version		Release: 1.0

// Used to apply transitions to elements
@mixin transition($param1:null, $param2:null, $param3:null) {
	@if $param3 == null {
		@if $param2 == null {
			@if $param1 == null {
				-ms-transition: all 300ms ease;
				-o-transition: all 300ms ease;
				-moz-transition: all 300ms ease;
				-webkit-transition: all 300ms ease;
				transition: all 300ms ease;
			} @else {
				-ms-transition: $param1;
				-o-transition: $param1;
				-moz-transition: $param1;
				-webkit-transition: $param1;
				transition: $param1;
			}
		} @else {
			-ms-transition: $param1, $param2;
			-o-transition: $param1, $param2;
			-moz-transition: $param1, $param2;
			-webkit-transition: $param1, $param2;
			transition: $param1, $param2;
		}
	} @else {
		-ms-transition: $param1, $param2, $param3;
		-o-transition: $param1, $param2, $param3;
		-moz-transition: $param1, $param2, $param3;
		-webkit-transition: $param1, $param2, $param3;
		transition: $param1, $param2, $param3;
	}
}

// Used for skewing an element vertically
@mixin skewY($degrees) {
	-ms-transform: skewY($degrees + deg);
	-o-transform: skewY($degrees + deg);
	-moz-transform: skewY($degrees + deg);
	-webkit-transform: skewY($degrees + deg);
	transform: skewY($degrees + deg);
}

// Used for skewing an element horizontally
@mixin skewX($degrees) {
	-ms-transform: skewX($degrees + deg);
	-o-transform: skewX($degrees + deg);
	-moz-transform: skewX($degrees + deg);
	-webkit-transform: skewX($degrees + deg);
	transform: skewX($degrees + deg);
}

// Used for moving the position of an element
@mixin translate($param1, $param2:null) {
	@if $param2 == null {
		-ms-transform: translate($param1);
		-o-transform: translate($param1);
		-moz-transform: translate($param1);
		-webkit-transform: translate($param1);
		transform: translate($param1);
	} @else {
		-ms-transform: translate($param1, $param2);
		-o-transform: translate($param1, $param2);
		-moz-transform: translate($param1, $param2);
		-webkit-transform: translate($param1, $param2);
		transform: translate($param1, $param2);
	}
}

// Used for scaling the size of an element
@mixin scale($value-X, $value-Y) {
	-ms-transform: scale($value-X, $value-Y);
	-o-transform: scale($value-X, $value-Y);
	-moz-transform: scale($value-X, $value-Y);
	-webkit-transform: scale($value-X, $value-Y);
	transform: scale($value-X, $value-Y);
}